--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data eq
--VERSION_BEGIN 17.1 cbx_cycloneii 2017:12:11:18:05:02:SJ cbx_lpm_add_sub 2017:12:11:18:05:02:SJ cbx_lpm_compare 2017:12:11:18:05:02:SJ cbx_lpm_decode 2017:12:11:18:05:02:SJ cbx_mgl 2017:12:11:18:07:53:SJ cbx_nadder 2017:12:11:18:05:02:SJ cbx_stratix 2017:12:11:18:05:02:SJ cbx_stratixii 2017:12:11:18:05:02:SJ  VERSION_END


-- Copyright (C) 2017  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 16 
SUBDESIGN decode_4aa
( 
	data[3..0]	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode1065w[3..0]	: WIRE;
	w_anode1082w[3..0]	: WIRE;
	w_anode1092w[3..0]	: WIRE;
	w_anode1102w[3..0]	: WIRE;
	w_anode1112w[3..0]	: WIRE;
	w_anode1122w[3..0]	: WIRE;
	w_anode1132w[3..0]	: WIRE;
	w_anode1142w[3..0]	: WIRE;
	w_anode1152w[3..0]	: WIRE;
	w_anode1163w[3..0]	: WIRE;
	w_anode1173w[3..0]	: WIRE;
	w_anode1183w[3..0]	: WIRE;
	w_anode1193w[3..0]	: WIRE;
	w_anode1203w[3..0]	: WIRE;
	w_anode1213w[3..0]	: WIRE;
	w_anode1223w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[7..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode1142w[3..3], w_anode1132w[3..3], w_anode1122w[3..3], w_anode1112w[3..3], w_anode1102w[3..3], w_anode1092w[3..3], w_anode1082w[3..3], w_anode1065w[3..3]);
	eq_wire2w[] = ( w_anode1223w[3..3], w_anode1213w[3..3], w_anode1203w[3..3], w_anode1193w[3..3], w_anode1183w[3..3], w_anode1173w[3..3], w_anode1163w[3..3], w_anode1152w[3..3]);
	w_anode1065w[] = ( (w_anode1065w[2..2] & (! data_wire[2..2])), (w_anode1065w[1..1] & (! data_wire[1..1])), (w_anode1065w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1082w[] = ( (w_anode1082w[2..2] & (! data_wire[2..2])), (w_anode1082w[1..1] & (! data_wire[1..1])), (w_anode1082w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1092w[] = ( (w_anode1092w[2..2] & (! data_wire[2..2])), (w_anode1092w[1..1] & data_wire[1..1]), (w_anode1092w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1102w[] = ( (w_anode1102w[2..2] & (! data_wire[2..2])), (w_anode1102w[1..1] & data_wire[1..1]), (w_anode1102w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1112w[] = ( (w_anode1112w[2..2] & data_wire[2..2]), (w_anode1112w[1..1] & (! data_wire[1..1])), (w_anode1112w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1122w[] = ( (w_anode1122w[2..2] & data_wire[2..2]), (w_anode1122w[1..1] & (! data_wire[1..1])), (w_anode1122w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1132w[] = ( (w_anode1132w[2..2] & data_wire[2..2]), (w_anode1132w[1..1] & data_wire[1..1]), (w_anode1132w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode1142w[] = ( (w_anode1142w[2..2] & data_wire[2..2]), (w_anode1142w[1..1] & data_wire[1..1]), (w_anode1142w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode1152w[] = ( (w_anode1152w[2..2] & (! data_wire[2..2])), (w_anode1152w[1..1] & (! data_wire[1..1])), (w_anode1152w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1163w[] = ( (w_anode1163w[2..2] & (! data_wire[2..2])), (w_anode1163w[1..1] & (! data_wire[1..1])), (w_anode1163w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1173w[] = ( (w_anode1173w[2..2] & (! data_wire[2..2])), (w_anode1173w[1..1] & data_wire[1..1]), (w_anode1173w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1183w[] = ( (w_anode1183w[2..2] & (! data_wire[2..2])), (w_anode1183w[1..1] & data_wire[1..1]), (w_anode1183w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1193w[] = ( (w_anode1193w[2..2] & data_wire[2..2]), (w_anode1193w[1..1] & (! data_wire[1..1])), (w_anode1193w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1203w[] = ( (w_anode1203w[2..2] & data_wire[2..2]), (w_anode1203w[1..1] & (! data_wire[1..1])), (w_anode1203w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode1213w[] = ( (w_anode1213w[2..2] & data_wire[2..2]), (w_anode1213w[1..1] & data_wire[1..1]), (w_anode1213w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode1223w[] = ( (w_anode1223w[2..2] & data_wire[2..2]), (w_anode1223w[1..1] & data_wire[1..1]), (w_anode1223w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
